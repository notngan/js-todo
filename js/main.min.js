!function o(i,a,l){function s(t,e){if(!a[t]){if(!i[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(d)return d(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var c=a[t]={exports:{}};i[t][0].call(c.exports,function(e){return s(i[t][1][e]||e)},c,c.exports,o,i,a,l)}return a[t].exports}for(var d="function"==typeof require&&require,e=0;e<l.length;e++)s(l[e]);return s}({1:[function(e,t,n){"use strict";function r(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var l=[],c=document.querySelector(".new-input"),o=document.querySelector(".btn-active"),i=document.querySelector(".btn-all"),a=document.querySelector(".btn-complete"),s=document.querySelector(".bottom-wrap"),d=document.querySelector(".todo-list"),u=document.querySelector(".complete-all"),f='<div class="todo-item %complete% %hide%">\n  <input class="complete-btn" type="checkbox" %check%></input>\n  <input type="text" class="content" value="%value%" disabled></input>\n  <span class="delete-btn">×</span>\n  </div>';function m(e){13===e.keyCode&&""!==c.value&&(f=f.replace(/%value%/,c.value),document.addEventListener("click",function(e){q(e.target,"complete-btn")?h(e.target):q(e.target,"delete-btn")&&p(e.target)}),document.addEventListener("dblclick",function(e){q(e.target,"content")&&v(e.target)}),a.classList.contains("active")&&(f=f.replace(/%hide%/,"hide")),d.insertAdjacentHTML("beforeend",f),A(),l.push({text:c.value,isCompleted:!1}),E(),c.value="",s.classList.remove("hide"),S())}function p(e){var t=document.querySelectorAll(".todo-item"),n=e.parentElement,r=n.parentElement;if(r&&n){var c=Array.prototype.indexOf.call(r.childNodes,n);for(var o in l)if(c==o){l.splice(o,1),E();break}r.removeChild(n),A(),t.length<2&&s.classList.add("hide")}}function v(i){var a=document.querySelectorAll(".todo-item");i.disabled=!1,i.addEventListener("keydown",function(e){if(13===e.keyCode){var t=i.parentElement,n=t.parentElement;if(null!=n&&null!=t){var r=Array.prototype.indexOf.call(n.childNodes,t);if(""==i.value){for(var c in l)if(r==c){l.splice(c,1),E();break}return n.removeChild(t),A(),void(a.length<2&&s.classList.add("hide"))}for(var o in l)if(o==r){l[o].text=this.value,E();break}}}})}function h(e){var t=e.parentElement,n=Array.prototype.indexOf.call(d.childNodes,t);if(e.checked){for(var r in t.classList.add("complete"),o.classList.contains("active")&&t.classList.add("hide"),A(),l)if(n==r){l[r].isCompleted=!0,E();break}}else for(var c in t.classList.remove("complete"),a.classList.contains("active")&&t.classList.add("hide"),A(),l)if(n==c){l[c].isCompleted=!1,E();break}}function y(){var r=document.querySelectorAll(".todo-item"),c=0;Array.from(r).forEach(function(e){var t=Array.prototype.indexOf.call(d.childNodes,e);if(e.classList.contains("complete"))c++;else for(var n in e.classList.add("complete"),e.querySelector(".complete-btn").checked=!0,A(),o.classList.contains("active")&&e.classList.add("hide"),a.classList.contains("active")&&e.classList.remove("hide"),l)if(t==n){l[n].isCompleted=!0,E();break}c===r.length&&Array.from(r).forEach(function(e){e.classList.remove("complete"),e.querySelector(".complete-btn").checked=!1;var t=Array.prototype.indexOf.call(d.childNodes,e);for(var n in A(),a.classList.contains("active")&&e.classList.add("hide"),o.classList.contains("active")&&e.classList.remove("hide"),l)if(t==n){l[n].isCompleted=!1,E();break}})})}function L(){var e=document.querySelectorAll(".todo-item");console.log("active"),Array.from(e).forEach(function(e){e.classList.contains("complete")?e.classList.add("hide"):e.classList.remove("hide")}),k(this)}function b(){var e=document.querySelectorAll(".todo-item");Array.from(e).forEach(function(e){e.classList.contains("complete")?e.classList.remove("hide"):e.classList.add("hide")}),k(this)}function g(){var e=document.querySelectorAll(".todo-item");Array.from(e).forEach(function(e){e.classList.remove("hide")}),k(this)}function k(e){var t=document.querySelectorAll(".btn");Array.from(t).forEach(function(e){e.classList.remove("active")}),e.classList.add("active")}function A(){var e=document.querySelectorAll(".todo-item:not(.complete");document.querySelector(".item-count").innerHTML=e.length||0}function E(){localStorage.clear(),localStorage.setItem("list",JSON.stringify(l))}function S(){f='<div class="todo-item %complete% %hide%">\n  <input class="complete-btn" type="checkbox" %check%></input>\n  <input type="text" class="content" value="%value%" disabled></input>\n  <span class="delete-btn">×</span>\n  </div>'}function q(e,t){return-1<e.className.split(" ").indexOf(t)}window.addEventListener("DOMContentLoaded",function(){!function(){var e=JSON.parse(localStorage.getItem("list"))||[];if(l.push.apply(l,r(e)),!e||e.length<1)return;for(var t=0;t<e.length;t++)f=f.replace(/%value%/,e[t].text),document.addEventListener("click",function(e){q(e.target,"complete-btn")?h(e.target):q(e.target,"delete-btn")&&p(e.target)}),document.addEventListener("dblclick",function(e){q(e.target,"content")&&v(e.target)}),e[t].isCompleted&&(f=(f=f.replace(/%check%/,"checked")).replace(/%complete%/,"complete")),d.insertAdjacentHTML("beforeend",f),s.classList.remove("hide"),A(),S()}(),c.addEventListener("keydown",m),o.addEventListener("click",L),a.addEventListener("click",b),i.addEventListener("click",g),u.addEventListener("click",y)})},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
